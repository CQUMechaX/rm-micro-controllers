; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]
default_envs = rm-dev-A
; lib_dir = micro-ros

[env:rm-dev-A]
platform = ststm32
framework = stm32cube
board = genericSTM32F423CH
board_build.f_cpu = 180000000L
board_build.mcu = stm32f427iih6
build_flags = 
	-DSTM32F427xx
	; -DUSE_FULL_ASSERT
	; -DUSE_HAL_PCD_REGISTER_CALLBACKS ; already defined
	-USTM32F423xx
	; -D CMSIS_device_header="stm32f427xx.h"
	-mfloat-abi=softfp ; see community.platformio 9601/2
	-std=c11
	-std=c++14
upload_protocol = stlink
; extra_scripts = extra_script.py              ; The "extra_script.py" file must be located in the main project folder
; build_unflags SEE ABOVE
debug_tool = stlink
; debug_server =
;   bash
;   -c
;   $PLATFORMIO_CORE_DIR/packages/tool-openocd/bin/openocd -s $PLATFORMIO_CORE_DIR/packages/tool-openocd/scripts -f interface/stlink.cfg -f target/stm32f4x.cfg -c "program {$PROJECT_BUILD_DIR/$PIOENV/firmware.elf" verify reset} 1>&2
;   $PLATFORMIO_CORE_DIR/packages/tool-openocd/bin/openocd -s $PLATFORMIO_CORE_DIR/packages/tool-openocd/scripts -f interface/stlink.cfg -f target/stm32f4x.cfg -c "program {.pio/build/rm-dev-A/firmware.elf} verify reset" 2>&1
debug_extra_cmds =
    monitor arm semihosting enable
debug_load_mode = always
; debug_load_cmds =
    ; program {.pio/build/rm-dev-A/firmware.elf} verify reset
debug_init_break =
; debug_port = :3333
; lib_compact_mode = strict
; lib_ldf_mode = deep+
; lib_extra_dirs = 
	; micro-ros
; See ststm32/builder/frameworks/stm32cube.py#155
monitor_speed = 115200
lib_archive = false
; See platform-ststm32 issues 468
lib_deps = 
	mincrmatt12/STM32Cube Middleware-FreeRTOS @ ~10.3.1
	microROS
	microROS-cube-example
	STM32_USB_Device_Library-Core
	STM32_USB_Device_Library-CDC
	; micro_ros_utilities
	; FreeRTOS-Plus-POSIX
	; action_msgs
	; *

custom_freertos_config_location = ./lib/microROS-cube-example/Inc/FreeRTOSConfig.h
custom_freertos_cmsis_impl = CMSIS_RTOS_V2
custom_freertos_features = 
	timers
custom_freertos_heap_impl = none; Since microROS-cube-example has